# referee.py (–≤–µ—Ä—Å–∏—è 2)

import requests
import redis
import sys
import time
import json
import uuid

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = '***REMOVED***'
CHAT_ID = '-1002998392121'
TOPIC_ID = 101
REDIS_HOST = '192.168.176.166'
REDIS_PORT = 6379
CHANNEL = 'relay_channel'
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---

# –î–ª—è —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –†–µ—Ñ–µ—Ä–∏ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è Telethon, —á—Ç–æ–±—ã —á–∏—Ç–∞—Ç—å —á–∞—Ç
try:
    from telethon.sync import TelegramClient
    # –í—Å—Ç–∞–≤—å—Ç–µ –í–ê–®–ò API_ID –∏ API_HASH
    API_ID = ***REMOVED***
    API_HASH = '***REMOVED***'
except ImportError:
    print("üî¥ Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon")
    sys.exit(1)

def send_telegram_message(text_to_send):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—ã–π —Ç–æ–ø–∏–∫ Telegram."""
    api_url = f'https://api.telegram.org/bot{TOKEN}/sendMessage'
    payload = {
        'chat_id': CHAT_ID,
        'text': text_to_send,
        'message_thread_id': TOPIC_ID
    }
    try:
        response = requests.post(api_url, json=payload, timeout=10)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def start_new_race(r_conn):
    """–û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —ç—Å—Ç–∞—Ñ–µ—Ç—ã."""
    referee_id = f"referee-{uuid.uuid4().hex[:6]}"
    
    # 1. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–±–∏—Ä–∞–µ–º –≥–æ—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    r_conn.delete('processed_bots')
    r_conn.publish(CHANNEL, json.dumps({'type': 'roll_call'}))
    print(f"[{referee_id}] üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏—á 'roll_call'. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç—ã 5 —Å–µ–∫—É–Ω–¥...")
    
    time.sleep(5)

    # 2. –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç–∏–≤—à–∏—Ö –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å
    ready_bots = sorted(list(r_conn.smembers('processed_bots')))
    if not ready_bots:
        print(f"[{referee_id}] üòî –ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–ª–∏—á.")
        send_telegram_message("üòî –ù–∏–∫—Ç–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –≥–æ—Ç–æ–≤ –∫ —ç—Å—Ç–∞—Ñ–µ—Ç–µ.")
        return
        
    print(f"[{referee_id}] üëç –ì–æ—Ç–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {ready_bots}")
    
    # 3. –û–±—ä—è–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ —á–∞—Ç–µ
    announcement = "–û–±—ä—è–≤–ª—è—é –ø–æ—Ä—è–¥–æ–∫ —ç—Å—Ç–∞—Ñ–µ—Ç—ã:\n"
    for i, bot_id in enumerate(ready_bots):
        announcement += f"{i+1}. {bot_id}\n"
    send_telegram_message(announcement)
    
    # 4. –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Å—Ç–∞—Ñ–µ—Ç—É
    start_payload = {'type': 'start_race', 'order': ready_bots}
    r_conn.publish(CHANNEL, json.dumps(start_payload))
    print(f"[{referee_id}] üöÄ –≠—Å—Ç–∞—Ñ–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞!")

def poll_telegram_for_start_command(client, r_conn):
    """
    –ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç Telegram-—á–∞—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã "–Ω–∞—á–∏–Ω–∞—é —ç—Å—Ç–∞—Ñ–µ—Ç—É".
    –≠—Ç–æ –Ω–∞–¥–µ–∂–Ω–µ–µ, —á–µ–º –ø–∞—Å—Å–∏–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.
    """
    print("üîç –†–µ—Ñ–µ—Ä–∏ –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä—è—Ç—å —á–∞—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã '–Ω–∞—á–∏–Ω–∞—é —ç—Å—Ç–∞—Ñ–µ—Ç—É'...")
    last_message_id = 0
    # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —É–∑–Ω–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—ã–µ
    for msg in client.iter_messages(int(CHAT_ID), limit=1):
        last_message_id = msg.id

    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            for message in client.iter_messages(int(CHAT_ID), limit=5, min_id=last_message_id):
                if message.raw_text and message.raw_text.lower() == "–Ω–∞—á–∏–Ω–∞—é —ç—Å—Ç–∞—Ñ–µ—Ç—É":
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤ —á–∞—Ç–µ! –ó–∞–ø—É—Å–∫–∞—é –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥.")
                    send_telegram_message("üèÅ –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —ç—Å—Ç–∞—Ñ–µ—Ç–µ...")
                    start_new_race(r_conn)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º ID, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞
                if message.id > last_message_id:
                    last_message_id = message.id
            
            time.sleep(3) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —á–∞—Ç–∞
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram: {e}")
            time.sleep(10)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –†–µ—Ñ–µ—Ä–∏."""
    print("üü¢ –†–µ—Ñ–µ—Ä–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    try:
        r = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, decode_responses=True)
        r.ping()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Redis.")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
        sys.exit(1)
        
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram –∫–∞–∫ —é–∑–µ—Ä-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    with TelegramClient('referee_session', API_ID, API_HASH) as client:
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç Telethon –∑–∞–ø—É—â–µ–Ω (–¥–ª—è —á—Ç–µ–Ω–∏—è —á–∞—Ç–∞).")
        poll_telegram_for_start_command(client, r)


if __name__ == "__main__":
    main()

